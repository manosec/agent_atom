from crewai import Agent, Task, Crew, Process
from dotenv import load_dotenv
from llm import groq_llm, gemini_llm
import os
from tools import store_tool
from models import CodeModel

load_dotenv()

GROQ_KEY = os.getenv('GROQ_API_KEY')
GEMINI_KEY = os.getenv("GEMINI_API_KEY")
print(GROQ_KEY)

artifact_manager = Agent(
    role="Artifact Manager",
    goal="""
        Extact the content based on schema
        """,
    backstory="You are an automated Artifact Manager designed to help developers organize their code. With a deep understanding of various programming languages and file conventions, your role is to ensure that every code snippet is stored in a file that accurately reflects its language. This ensures that the files are ready for execution, debugging, or further development.",
    llm=gemini_llm,
    allow_delegation=False,
    api_key=GEMINI_KEY,
    verbose=True
)


test_engineer = Agent(
    role="Test Engineer",
    goal="""
        Write clean, scalable, and maintainable code that complies with SOLID principles and best practices.
        
        Instructions:

        Break down tasks into modular, single-responsibility components.
        Prioritize code readability, reusability, and performance.
        Follow SOLID principles during design and implementation.
        Document key functions and design decisions.
        Write unit tests to validate functionality and edge cases.
        Proactively seek feedback and iterate on improvements.
        """,
    backstory="You are a passionate coder with a strong desire to improve. You thrive on feedback, continuously learning and refining your craft to deliver high-quality software.",
    llm=gemini_llm,
    allow_delegation=False,
    api_key=GEMINI_KEY,
    verbose=True
)

manager_llm = Agent(
    role="Senior Test Engineer / Testing Tech Lead",
    goal="""Review and provide constructive feedback on the code produced by the Test Engineer, ensuring it adheres to SOLID principles, scalability, and best practices.

            Instructions:

            - Analyze the test code for correctness, readability, and maintainability.
            - Validate compliance with SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion).
            - Ensure the test script is **agnostic** and **environment-independent**, capable of running across different operating systems, cloud platforms, and CI/CD pipelines without modifications.
            - Suggest optimizations for performance, scalability, and reusability.
            - Identify potential edge cases and recommend comprehensive test scenarios.
            - Enforce consistent naming conventions and documentation standards.
            - Provide clear, actionable feedback with explanations.""",
    backstory="""With years of experience in designing scalable systems and test automation frameworks, you are a meticulous and detail-oriented reviewer. 
                You have a deep understanding of writing platform-agnostic test scripts that run seamlessly across different environments, including cloud infrastructure and CI/CD pipelines. 
                Your mission is to guide junior engineers toward writing production-grade, maintainable, and environment-independent test code.""",
    llm=gemini_llm,
    api_key=GEMINI_KEY,
    verbose=True
)

artifact_manager_task = Task(
    description="""
                Extact the mentioned content from the given content code content. 
                """,
    expected_output="""
                Code/Script and dependencies
                """,
    agent=artifact_manager,
    output_pydantic=CodeModel,
    output_file="report.md"
)

test_engineer_task = Task(
    description="""
                Generate an executable template script based on the provided test case scenario {message}. The script should be ready to accept parameters and run in the target environment.
                
                Instructions:

                Understand the scenario described in {message} and the target environment.
                Choose the appropriate scripting language (Python, Ansible, or others) based on the context.
                Design the script to accept external parameters (e.g., input variables or arguments).
                Include clear sections: Initialization, Execution, Parameter Handling, and Cleanup.
                Implement error handling, logging, and validation mechanisms.
                Ensure the script is idempotent and follows industry best practices.
                Add comments to explain key logic and parameter usage.
                """,
    expected_output="A fully executable, parameterized template script in the appropriate language, ready to be deployed on the target environment.",
    agent=test_engineer,
)

manager_task = Task(
    description="""Review the template script generated by the Test Engineer based on the provided test case scenario {message}. 
                    Ensure the script meets functional, performance, maintainability, and **environment-agnostic** standards before execution across different target environments.
                    
                    Instructions:
                    
                    - Validate that the script language and dependencies align with **multi-environment compatibility** (Linux, Windows, Cloud, or CI/CD pipelines).
                    - Assess whether the script correctly handles input parameters, environment variables, and external dependencies without hard-coded configurations.
                    - Ensure the script follows best practices (**idempotency, modularity, parameterization, and error handling**).
                    - Identify potential failure points and recommend **robust error-handling improvements**.
                    - Evaluate the script for **scalability, security considerations, and performance optimizations**.
                    - Check that comments and documentation provide **clear instructions on how to run the script across different environments**.
                    - Provide actionable feedback with **necessary modifications** to make the script environment-agnostic and production-ready.
                    """,

    expected_output="A refined template script with constructive feedback, necessary modifications, and cross-environment compatibility, ensuring the script is ready for seamless deployment.",
    agent=manager_llm
)

crew = Crew(
    agents=[test_engineer, manager_llm, artifact_manager],
    tasks=[test_engineer_task, manager_task, artifact_manager_task],
    memory=True,
    embedder={
        "provider": "google",
        "config": {
            "api_key": GEMINI_KEY,
            "model": "models/embedding-001"
        }
    },
    manager_llm=groq_llm,
    verbose=True,
)

if query := input("Enter the chaos test case:"):
    result  = crew.kickoff(inputs={"message":query})
    print(result)